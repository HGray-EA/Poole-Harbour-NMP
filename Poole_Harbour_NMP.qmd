---
title: "Poole Harbour Nutrient Monitoring Report"
format:
  html:
    theme: flatly
    toc: true
    toc-location: right
    toc-depth: 3
    number-sections: true
    code-fold: false
    code-tools: false
    fig-cap: true
    title-block-banner: /dbfs/FileStore/WSX_HGray/S2B_tile_20240719_30UWB_0_B04_B03_B02_S___2_1837043762207036_50_6565565866527__1_9062423706054623_50.jpeg
---


```{r quarto setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE, echo=FALSE, cache=TRUE)
#| warning: false
#| echo: false
```

### Monitoring Sites Map

```{r, monitoring sites map}
# Monitoring in Poole Harbour
library(sf)

# Load in WIMS for CAT
source("WIMS_Transform_Script.R")
source("Catch_Set_Up.R")

# Load your data
CDE <- read.csv("/dbfs/mnt/lab/unrestricted/harry.gray@environment-agency.gov.uk/CEP/WFD_Wessex_2024.csv")

CDE %<>% 
  filter(Operational.Catchment == unique(CAT$OPCAT_NAME)) %>% 
  inner_join(CAT_geo, ., by = c("WB_ID" = "Water.Body.ID"))


# We display most recent 2 years after the last classifications. 
# We display the 3 years before then which aligns with the 2022 interim WFD classification.

WIMS_CAT_22 <- WIMS_CAT %>%  filter(Year >= 2022)             
WIMS_CAT_20 <- WIMS_CAT %>%  filter(Year >= 2019 & Year < 2022) 

#1 Wims
WIMS_P <- WIMS_CAT_22 %>% filter(
  determinand.definition == "Orthophosphate, reactive as P") %>% 
  group_by(sample.samplingPoint.label) %>% 
  mutate(Mean_P = round(mean(result),2),
         Mean_count = n()) %>% 
  ungroup()

#2 CDE Transforms
CDE_P <- CDE %>% filter(Classification.Item == "Phosphate" & Year == "2022")

CDE_P_2019 <- CDE %>% filter(Classification.Item == "Phosphate" & Year == "2019")

WIMS_am <- WIMS_CAT_22 %>% filter(
  determinand.definition== "Ammoniacal Nitrogen as N"
) %>% 
  group_by(sample.samplingPoint.label) %>% 
  mutate(Mean_A = round(mean(result),2),
         Mean_count = n())
#CDE Transforms
CDE_Am<- CDE %>% filter(Classification.Item == "Ammonia (Phys-Chemical)" & Year == "2022")

CDE_Am_2019 <- CDE %>% filter(Classification.Item == "Ammonia (Phys-Chemical)" & Year == "2019")

WIMS_DO <- WIMS_CAT_22 %>% filter(
  determinand.definition == "Oxygen, Dissolved, % Saturation") %>% 
  group_by(sample.samplingPoint.label) %>% 
  mutate(Mean_DO = round(mean(result),2),
         Mean_count = n()) %>% 
  ungroup()

CDE_DO <- CDE %>% filter(Classification.Item == "Dissolved oxygen" & Year == "2022")
CDE_DO_2019 <- CDE %>% filter(Classification.Item == "Dissolved oxygen" & Year == "2019")

WIMS_BOD <- WIMS_CAT_22 %>% filter(
  determinand.definition == "BOD : 5 Day ATU") %>% 
  group_by(sample.samplingPoint.label) %>% 
  mutate(BOD_90th = round(quantile(result, probs = 0.9, na.rm=TRUE),2),
         Quantile_count = n()) %>% 
  ungroup()

CDE_BOD <- CDE %>% filter(Classification.Item == "Biochemical Overall Oxygen Demand (BOD)" & Year == "2022")
CDE_BOD_2019 <- CDE %>% filter(Classification.Item == "Biochemical Overall Oxygen Demand (BOD)" & Year == "2019")

WIMS_NTU <- WIMS_CAT_22 %>% filter(
  determinand.definition == "Turbidity") %>% 
  group_by(sample.samplingPoint.label) %>% 
  mutate(Mean_NTU = round(mean(result),2),
         Mean_count = n()) %>% 
  ungroup()


Phys_Chem_Site <- readxl::read_excel("/dbfs/FileStore/WSX_HGray/2022_Phys_Chem_Classification_QA_document__RAW_.xlsx", sheet= "Site Class")

# Filter by Wessex area and convert to sf
Phys_Chem_Site <- Phys_Chem_Site %>% filter(SITE_EA_AREA == "Wessex") %>% 
  st_as_sf(coords=c("SITE_EASTING","SITE_NORTHING"), crs=27700) %>% 
  st_transform(4326)

Phys_Chem_Site <- Phys_Chem_Site[CAT,]
# Phosphate
Site_P <- Phys_Chem_Site %>% filter(Name == "Phosphate") 

# Ammonia
Site_Am <- Phys_Chem_Site %>% filter(Name== "Ammonia")

# DO
Site_DO <- Phys_Chem_Site %>% filter(Name=="DO")

# BOD
Site_BOD <- Phys_Chem_Site %>% filter(Name=="BOD")
```

```{r}


# Get monitoring sites from the Harbour

PH_Sites <- data.frame(Lat= c("50.703328","50.679496","50.7025", "50.701578", "50.678598", "50.711076", "50.712833", "50.710927", "50.719319", "50.713838", "50.701499"),
                    
            Long= c("-2.009329","-1.978328", "-1.951654", "-1.941431", "-1.952612", "-1.970779", "-1.992491", "-2.000167", "-2.040128", "-2.025251", "-2.053664"),
              
            Site= c("Poole Harbour Three (Hutchins Buoy 71)","Poole Harbour Twelve (South Deep)", "POOLE HARBOUR SIX NORTH CHANNEL NEAR BUOY NO. 36", "Poole Harbour East Dorset Sailing Club", "	POOLE HARBOUR SOUTH HAVEN POINT", "POOLE HARBOUR BAITER PARK", "POOLE HARBOUR FOUR POOLE BRIDGE", "POOLE HARBOUR HAMWORTHY PARK", "POOLE HARBOUR ROCKLEY SANDS (19450)", "POOLE HARBOUR AT LAKE (19400)","POOLE HARBOUR 1 WAREHAM CHANNEL BUOY 82"))


startDate="2015-01-01"
endDate="2025-02-03"

param.units="mg/l"

det="9943" #	Nitrogen, Total Oxidised as N
#read water quality data from online WQ archive
wd<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?area=6-28&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=999999"),stringsAsFactors=FALSE)

TraC.dat <- wd %>% mutate(
               easting = as.numeric(sample.samplingPoint.easting),
               northing = as.numeric(sample.samplingPoint.northing),
              Date = as.Date(sample.sampleDateTime)
                ) %>% 
              st_as_sf(coords= c("easting","northing"), crs=27700) %>% 
              st_transform(4326) %>% 
             filter(Date > "2020-01-01") %>% 
             group_by(sample.samplingPoint.notation) %>% 
             mutate(
              Mean_N = round(mean(result),2),
              Mean_Count = n()
              ) %>% 
             ungroup()

det = "0116" # 	Nitrogen, Total Oxidised as N
wd.land<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?area=6-28&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=999999"),stringsAsFactors=FALSE)

Riv.dat<-wd.land %>% mutate(
               easting = as.numeric(sample.samplingPoint.easting),
               northing = as.numeric(sample.samplingPoint.northing),
               Date = as.Date(sample.sampleDateTime)
                ) %>% 
              st_as_sf(coords= c("easting","northing"), crs=27700) %>% 
              st_transform(4326) %>% 
             filter(Date > "2020-01-01") %>% 
             group_by(sample.samplingPoint.notation) %>% 
             mutate(
              Mean_N = round(mean(result),2),
              Mean_Count = n()
              ) %>% 
             ungroup()

Riv.dat <- Riv.dat[CAT,]


# We now have a dataset for hourly spills within 2022 which is linked to locations. 
library(leaflet.extras)

# Define log-scaled bins for numeric data
binz <-c(0,0.2,0.5,1,5,10,15,Inf)

# Create a color palette using colorBin for numeric data
pal_p <- colorBin(palette = "inferno", domain = WIMS_am$result, bins = binz, reverse=TRUE )


leaflet() %>%
  addProviderTiles(providers$Esri, group = "Esri Basemap") %>%
  addPolygons(
    data = CAT_Union,
    fillOpacity = 0.0001,
    fillColor = NA,
    color = "black",
    weight = 3,
    options = pathOptions(zIndex = 600)
  ) %>%
  addPolygons(
    data = CAT,
    fillOpacity = 0.0001,
    fillColor = NA,
    color = "black",
    weight = 3,
    highlightOptions = highlightOptions(
      color = "white",
      weight = 4,
      bringToFront = FALSE
    ),
    options = pathOptions(zIndex = 600),
    group = "Waterbodies"
  ) %>%
  addPolylines(
    data = DRN,
    col = "#2832C2",
    weight = 1,
    opacity = 0.5,
    options = pathOptions(zIndex = 600)
  ) %>%
  addCircleMarkers(
    data = Riv.dat,
    radius = 10,
    color = "black",
    weight = 1,
    fillColor = ~pal_p(Mean_N),
    fillOpacity = 1,
    popup = ~paste0(
      "Site: ", Riv.dat$sample.samplingPoint.label, "<br> Mean N (mg/L): ", Riv.dat$Mean_N, 
      "<br> Sample Count: ", Riv.dat$Mean_Count,
      "<br> from/to: ", min(Riv.dat$Date), " / ", max(Riv.dat$Date)
    ),
    options = pathOptions(zIndex = 999),
    group = "PO4-P"
  ) %>%
    addLegend(
    "bottomleft",
    pal = pal_p,
    values = binz,
    title = "Mean N 2022-2025",
    group = "PO4-P"
  ) %>%
  addScaleBar() %>%
  addLayersControl(
    overlayGroups = c("Waterbodies"),
    position = "topright",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  htmlwidgets::onRender(Layers_JS) %>%
  hideGroup("Waterbodies")

###########################################################################################################################################################


```

```{r TraC Map}

# Define log-scaled bins for numeric data
bins <-c(0,0.02,0.05,0.1,0.5,1,2,Inf)

# Create a color palette using colorBin for numeric data
pal_p <- colorBin(palette = "magma", domain = WIMS_am$result, bins = bins, reverse=TRUE )


leaflet() %>%
  setView("-2.0063083662813836","50.68760858102863",  zoom =12) %>% 
  addProviderTiles(providers$Esri, group = "Esri Basemap") %>%
  addPolygons(
    data = CAT_Union,
    fillOpacity = 0.0001,
    fillColor = NA,
    color = "black",
    weight = 3,
    options = pathOptions(zIndex = 600)
  ) %>%
  addPolygons(
    data = CAT,
    fillOpacity = 0.0001,
    fillColor = NA,
    color = "black",
    weight = 3,
    highlightOptions = highlightOptions(
      color = "white",
      weight = 4,
      bringToFront = FALSE
    ),
    options = pathOptions(zIndex = 600),
    group = "Waterbodies"
  ) %>%
  addPolylines(
    data = DRN,
    col = "#2832C2",
    weight = 1,
    opacity = 0.5,
    options = pathOptions(zIndex = 600)
  ) %>%
  addCircleMarkers(
    data= TraC.dat,
    radius = 10,
    color = "black",
    weight = 1,
    fillColor = ~pal_p(Mean_N),
    fillOpacity = 1,
     popup = ~paste0(
      "Site: ", TraC.dat$sample.samplingPoint.label, "<br> Mean N (mg/L): ", TraC.dat$Mean_N, 
      "<br> Sample Count: ", TraC.dat$Mean_Count,
      "<br> from/to: ", min(TraC.dat$Date), " / ", max(TraC.dat$Date)
    ),
    options = pathOptions(zIndex = 999),
    group = "PO4-P"
  ) %>%
  addLegend(
    "bottomleft",
    pal = pal_p,
    values = binz,
    title = "Mean N Tot 2022-2025",
    group = "PO4-P"
  ) %>%
  addScaleBar() %>%
  addLayersControl(
    overlayGroups = c("Waterbodies"),
    position = "topright",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  htmlwidgets::onRender(Layers_JS) %>%
  hideGroup("Waterbodies")
```


```{r, Overview of monitoring histograms}


TraC.dat = TraC.dat[CAT,]
### 

# Violin plot
v <- ggplot(TraC.dat, aes(x = sample.samplingPoint.label, y = result)) +
  # geom_violin(aes(fill = sample.samplingPoint.label), color = "black", alpha = 0.5) +  # Violin plot with some transparency
  geom_boxplot(width = 0.05, color = "black", aes(fill = sample.samplingPoint.label), alpha = 0.7) +  # Boxplot on top
  geom_text(aes(x = sample.samplingPoint.label, y = -Inf, label = paste("Count: ", Mean_Count)), vjust = -0.5, hjust = 0.5, size = 4) +  # Add counts below the x-axis if available
  labs(title = "2020-2025 Total N Distribution by Site", x = "Site", y = "Total Nitrogen as N (mg/L)") +
  #scale_y_continuous(limits = c(0,20), breaks = c(0,0.1,0.2,0.3,0.5,1)) + 
#  geom_hline(yintercept = 0.3, col = "red")+ # this is wfd poor
#  geom_hline(yintercept = 0.1, col = "green")+# this is wfd good
  theme_minimal() +  # Use a minimal theme for a cleaner look
  theme(legend.position = "none", axis.text.x = element_text(angle=45, size=9)) +
  labs(caption = "Total Nitrogen as N")+
  coord_flip()

#a <- ggplot(WIMS_p, aes(x= WB_NAME, y=result, col=result))+
#  geom_point()+theme(axis.text.x = element_text(angle=90, size=5))+labs(y= "Orthophosphate (mg/L)", x= "Waterbodies")

# Add the caption manually using layout
plotly::ggplotly(v)  %>%
  plotly::layout(
    annotations = list(
      x = 0.5,  # Horizontal center
      y = -5,  # Position below the plot
      text = "Total Nitrogen as N",
      showarrow = FALSE,
      xref = "paper",
      yref = "paper",
      font = list(size = 12)  # Adjust the font size if needed
    )
  )

```


### Timeseries trends

```{r}
Sites = c("RIVER PIDDLE AT WEST MILLS", "CORFE RIVER D/S CORFE STW", "SHERFORD RIVER AT KING BRIDGE", "WAREHAM FOREST STREAM AT SANDFORD ROAD", " NORTHPORT @ NORTHMOOR PARK", "RIVER FROME AT HOLME BRIDGE")

W_Sites <- WIMS_CAT %>% filter(sample.samplingPoint.label %in% Sites) %>% 
            mutate(month = lubridate::month(date_time))

W_Sites_Winter <- W_Sites %>%  filter(month <= "06" & month >= "09")

ggplot(W_Sites, aes(date_time, result), col= result)+geom_point()+facet_wrap(~sample.samplingPoint.label, ncol=3)

```


A Generalised Additive Model was 
Water Quality River Frome

```{r, River Frome Water Quality Plots}
library(MetBrewer)
library(mgcv) 
library(cowplot)

wqsite<-"SW-50590127"#River Frome at Holme Bridge

startDate="2000-01-01"
endDate="2025-02-03"

param.units="mg/l"

det="0118"#OrthoP #0116

#read water quality data from online WQ archive
F.O.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date) %>% 
  filter(Date > "2015-01-01")

  gam_FO <- gam(Result ~ s(as.numeric(Date), bs = "cs"), data = F.O.wq.data)
  
    future_dates <- data.frame(Date = seq(as.Date("2025-02-04"), as.Date("2030-12-31"), by = "month"))
  
  #Predict
      future_dates$Predicted_Result <- predict(gam_FO, newdata = future_dates, type = "response")
  

A <- ggplot(F.O.wq.data, aes(x = Date, y = Result)) +
  geom_point(alpha = 0.2, col = "#c24f00") +
  geom_rug(sides = "l", alpha = 0.2) +  
  stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = TRUE, col="red")+
  geom_line(data = future_dates, aes(x = Date, y = Predicted_Result), col = "darkred", alpha = 0.8, linetype = "dashed") +
  labs(title = "Orthophosphate",
       x = "Date",
       y = "Orthophosphate (mg/L)")


det="0116"#OrthoP #0116

#read water quality data from online WQ archive
F.TotN.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date) %>% 
  filter(Date > "2015-01-01")


# GAM for Nitrogen

gam_FN <- gam(Result ~ s(as.numeric(Date), bs = "cs"), data = F.TotN.wq.data)


future_dates <- data.frame(Date = seq(as.Date("2025-02-04"), as.Date("2030-12-31"), by = "month"))

#Predict
future_dates$Predicted_Result <- predict(gam_FN, newdata = future_dates, type = "response")

B <- ggplot(F.TotN.wq.data, aes(x = Date, y = Result)) +
  geom_point(alpha = 0.2, col = "#0073C2FF") +
  geom_rug(sides = "l", alpha = 0.2) +  
  stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = TRUE, col="red")+
  geom_line(data = future_dates, aes(x = Date, y = Predicted_Result), col = "darkred", alpha = 0.8, linetype = "dashed") +
  labs(title = "Total Nitrogen Oxidised as N",
       x = "Date",
       y = "Tot N (mg/L)")



plot_grid(A, B, title= "River Frome at Holme Bridge") #labels = c("OrthoP", "Tot N"))
```

```{r Piddle}
wqsite<-"SW-50450129"

startDate="2000-01-01"
endDate="2025-02-03"

param.units="mg/l"


det="0118"#OrthoP #0116

#read water quality data from online WQ archive
P.O.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date) %>% 
  filter(Date > "2015-01-01")

  gam_PO <- gam(Result ~ s(as.numeric(Date), bs = "cs"), data = P.O.wq.data)

  #Predict
      future_dates$Predicted_Result <- predict(gam_FO, newdata = future_dates, type = "response")
  

A <- ggplot(P.O.wq.data, aes(x = Date, y = Result)) +
  geom_point(alpha = 0.2, col = "#c24f00") +
  geom_rug(sides = "l", alpha = 0.2) +  
  stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = TRUE, col="red")+
  geom_line(data = future_dates, aes(x = Date, y = Predicted_Result), col = "darkred", alpha = 0.8, linetype = "dashed") +
  labs(title = "GAM Prediction for Orthophosphate",
       x = "Date",
       y = "Orthophosphate (mg/L)")


det="0116"#OrthoP #0116

#read water quality data from online WQ archive
P.TotN.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date) %>% 
  filter(Date > "2015-01-01")

# GAM for Nitrogen

gam_PN <- gam(Result ~ s(as.numeric(Date), bs = "cs"), data = P.TotN.wq.data)


future_dates <- data.frame(Date = seq(as.Date("2025-02-04"), as.Date("2030-12-31"), by = "month"))

#Predict
future_dates$Predicted_Result <- predict(gam_FN, newdata = future_dates, type = "response")

B <- ggplot(F.TotN.wq.data, aes(x = Date, y = Result)) +
  geom_point(alpha = 0.2, col = "#0073C2FF") +
  geom_rug(sides = "l", alpha = 0.2) +  
  stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), se = TRUE, col="red")+
  geom_line(data = future_dates, aes(x = Date, y = Predicted_Result), col = "darkred", alpha = 0.8, linetype = "dashed") +
  labs(title = "GAM Predictions for Total Nitrogen as N",
       x = "Date",
       y = "Tot N (mg/L)")



plot_grid(A, B) #labels = c("OrthoP", "Tot N"))


```

```{r}
wqsite<-"SW-50951010"

startDate="2000-01-01"
endDate="2025-02-03"

param.units="mg/l"

det="0118"#OrthoP #0116

#read water quality data from online WQ archive
Sher.O.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date)

det="0116"#OrthoP #0116

#read water quality data from online WQ archive
Sher.N.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date)

Sher_OP <- ggplot(Sher.O.wq.data, aes(Date, Result)) +
  geom_point(aes(color = Result)) +
  scale_x_date(limits = as.Date(c("2015-01-01", "2025-02-03"))) +
  scale_y_continuous(limits = c(0, 0.04)) +
  scale_color_gradientn(colors = met.brewer("Derain", direction = -1)) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), colour = "red") +
  labs(title = "Orthophosphate, Sherford River At King Bridge",
       x = "Date", y = "Result (mg/l)") +
  theme_bw()

Sher_N <- ggplot(Sher.N.wq.data, aes(Date, Result)) +
  geom_point(aes(color = Result)) +
  scale_x_date(limits = as.Date(c("2000-01-01", "2025-02-03"))) +
 scale_y_continuous(limits = c(2.5, 10)) +
  scale_color_gradientn(colors = met.brewer("Derain", direction = -1)) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), colour = "red") +
  labs(title = "Total N Oxidised, Sherford River At King Bridge",
       x = "Date", y = "Result (mg/l)") +
  theme_bw()

plot_grid(Sher_OP, Sher_N)

```

```{r, Poole Harbour 3 Hutchins Buoy}

wqsite<-"SW-50950249"

startDate="2000-01-01"
endDate="2025-02-03"

param.units="mg/l"


det="9856"#OrthoP #0116

#read water quality data from online WQ archive
PH3.O.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date)


det="9943"#OrthoP #0116

#read water quality data from online WQ archive
PH3.N.wq.data<-read.csv(paste0("https://environment.data.gov.uk/water-quality/data/measurement.csv?samplingPoint=",wqsite,"&determinand=",det,"&startDate=",startDate,"&endDate=",endDate,"&_limit=99999"),stringsAsFactors=FALSE)%>%
  mutate(date.time=ymd_hms(sample.sampleDateTime,tz="Europe/London"))%>%
  mutate(Date=date(date.time))%>%
  rename(Result=result)%>%
  rename(Remark=resultQualifier.notation)%>%
  select(Date,Remark,Result)%>%
  group_by(Date,Remark)%>%
  summarise(Result=mean(Result))%>%
  arrange(Date)

PH3_OP <- ggplot(PH3.O.wq.data, aes(Date, Result)) +
  geom_point(aes(color = Result)) +
  scale_x_date(limits = as.Date(c("2015-01-01", "2025-02-03"))) +
  scale_y_continuous(limits = c(0, 0.05)) +
  scale_color_gradientn(colors = met.brewer("Derain", direction = -1)) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), colour = "red") +
  labs(title = "Orthophosphate, Poole Harbour 3",
       x = "Date", y = "Result (mg/l)") +
  theme_bw()


PH3_N <- ggplot(PH3.N.wq.data, aes(Date, Result)) +
  geom_point(aes(color = Result)) +
  scale_x_date(limits = as.Date(c("2000-01-01", "2025-02-03"))) +
 scale_y_continuous(limits = c(2.5, 10)) +
  scale_color_gradientn(colors = met.brewer("Derain", direction = -1)) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), colour = "red") +
  labs(title = "Total N Oxidised, Poole Harbour 3",
       x = "Date", y = "Result (mg/l)") +
  theme_bw()

plot_grid(PH3_OP, PH3_N)
```
